テキストオブジェクト
surrend

ys
	カーソルの位置から囲む
		ysw)
	単語を囲む
		ysiw)
		ysiw'

Old text                  Command     New text ~
Hello w*orld!             ys$"        Hello w"orld)!"
Hello w*orld!             ysw'        Hello w'orld')!
Hello w*orld!             ysiw)       Hello (world)!
Hello w*orld!             yss"        "Hello world!"
Hello w*orld!             yssB        {Hello world!}


	行
		yss
		yssB		カレント行を { } で囲む。
		ysst		カレント行をタグで囲む。
			ysst<p>
		ySSt		カレント行をタグで囲む（インデントする）
			ySSt<p>

vs
	vllls"

change
	cs"'
	cs"<q>
	cs)]
	cs([
	cs{} スペースが消せる。
		{ 123 }
		{123}
	cst<p>
Old text                  Command     New text
"Hello *world!"           cs"'        'Hello world!'
"Hello *world!"           cs"<q>      <q>Hello world!</q>
(123+4*56)/2              cs)]        [123+456]/2
(123+4*56)/2              cs)[        [ 123+456 ]/2
<div>Yo!*</div>           cst<p>      <p>Yo!</p>

delete
	ds"
	ds(
	ds)
	ds[
	ds]
	ds{
	ds}
	dst
Old text                  Command     New text
"Hello *world!"           di"         ""
'Hello *world!'           di'         ''
(123+4*56)/2              di(         ()/2
{12i+4i56}/2              di{         {}/2
<div>Yo!*</div>           dit         <div></div>
Hello wo*rld!             diw         Hello !

Old text                  Command     New text
"Hello *world!"           ds"         Hello world!
(123+4*56)/2              ds)         123+456/2
<div>Yo!*</div>           dst         Yo!

surroundings
s

tag
t



組み合わせパターン
cs
ds
cst<p>

ysiw)

([
(を[に変更。(スペースの追加あり)

)]
)を]に変更。



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

y
追加
	単語の先頭から_で囲む
ysw_
ysw"
ysw'
ysw)

	inner
	i
yiw

	word
	w
yiw

	all
	a
yap

	paragraph
	p
yap




ys

テキストオブジェクトに対して cs の効果を与える。

ysiw)
iw （inner word） で選択したテキストオブジェクトを ( ) で囲む。

"Hello World!"
↓
"Hello (World)!"
yss
カレント行に対して cs の効果を与える。

yssB
カレント行を { } で囲む。

"Hello World!"
↓
{"Hello World!"}
ysst
カレント行をタグで囲む。

ysst<p>
カレント行を <p> タグで囲む。

Hello World!
↓
<p>Hello World!</p>
ySSt
カレント行をタグで囲む（インデントする）

ySSt<p>
カレント行を <p> タグで囲む（インデントする）

Hello World!
↓
<p>
    Hello World!
</p>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

vs

ビジュアルモード選択範囲に対して cs の効果を与える。

l
カーソル右移動

vllls"
ビジュアルモード選択範囲を " で囲む。

Hello World!
↓
Hello "Worl"d!


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

	+-------------+-------------+
	| Original    | :Alignta =  |
	+-------------+-------------+
	| a = 1       | a     = 1   |
	| bbb = 10    | bbb   = 10  |
	| ccccc = 100 | ccccc = 100 |
	+-------------+-------------+

	+-------+--------+---------+--------+-------+
	| Left  | Left   | Matched | Right  | Right |
	| field | margin | field   | margin | field |
	+-------+--------+---------+--------+-------+
	| a@@@@ | @      | =       | @      | 1     |
	| bbb@@ | @      | =       | @      | 10    |
	| ccccc | @      | =       | @      | 100   |
	+-------+--------+---------+--------+-------+

	+--------------------+--------------------+
	| Original           | :Alignta <- b      |
	+--------------------+--------------------+
	| a        b c       | a      b c         |
	| aaa       bbb  ccc | aaa    bbb  ccc    |
	| aaaaa  bbbbb ccccc | aaaaa  bbbbb ccccc |
	+--------------------+--------------------+

	+-------------+-------------+
	| Original    | :Alignta =  |
	+-------------+-------------+
	| a = 1       | a     = 1   |
	| bbb = 10    | bbb   = 10  |
	| ccccc = 100 | ccccc = 100 |
	+-------------+-------------+

	+------------------+----------------------+
	| Original         | :Alignta \d\+        |
	+------------------+----------------------+
	| a \d\+ 1 aaaaa   | a \d\+     1   aaaaa |
	| bbb \d\+ 10 bbb  | bbb \d\+   10  bbb   |
	| ccccc \d\+ 100 c | ccccc \d\+ 100 c     |
	+------------------+----------------------+

パターン解釈法の制御 ~

	以下のオプションをパターンの前に置くことで :Aligntaコマンドによるパタ
	ーンの解釈法を制御できます。


	オプション	意味
	-----------	--------------------------------------------
	-e		次の引数をパターンとみなし、
			字面通りの文字列として解釈

	-r		次の引数をパターンとみなし、
			正規表現として解釈

	-E		以後のパターンを字面通りの文字列として解釈
	-R		以後のパターンを正規表現として解釈


	用例： >
	+------------------+--------------------+
	| Original         | :Alignta -e \d\+   |
	+------------------+--------------------+
	| a \d\+ 1 aaaaa   | a     \d\+ 1 aaaaa |
	| bbb \d\+ 10 bbb  | bbb   \d\+ 10 bbb  |
	| ccccc \d\+ 100 c | ccccc \d\+ 100 c   |
	+------------------+--------------------+















""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



"HTML文字変換コード。

" HTML Key Mappings for Typing Character Codes: {{{
"
" |--------------------------------------------------------------------
" |Keys    |Insert   |For  |Comment
" |--------|---------|-----|-------------------------------------------
" |\&      |&amp;    |&    |ampersand
" |\<      |&lt;     |<    |less-than sign
" |\>      |&gt;     |>    |greater-than sign
" |\.      |&middot; |・   |middle dot (decimal point)
" |\?      |&#8212;  |?    |em-dash
" |\2      |&#8220;  |“   |open curved double quote
" |\"      |&#8221;  |”   |close curved double quote
" |\`      |&#8216;  |‘   |open curved single quote
" |\'      |&#8217;  |’   |close curved single quote (apostrophe)
" |\`      |`        |`    |OS-dependent open single quote
" |\'      |'        |'    |OS-dependent close or vertical single quote
" |\<Space>|&nbsp;   |     |non-breaking space
" |---------------------------------------------------------------------
"
" > http://www.stripey.com/vim/html.html
"

autocmd BufEnter * if &filetype == "html" | call MapHTMLKeys() | endif
function! MapHTMLKeys(...)
  if a:0 == 0 || a:1 != 0
    inoremap \\ \
    inoremap \& &amp;
    inoremap \< &lt;
    inoremap \> &gt;
    inoremap \. ・
    inoremap \- &#8212;
    inoremap \<Space> &nbsp;
    inoremap \` &#8216;
    inoremap \' &#8217;
    inoremap \2 &#8220;
    inoremap \" &#8221;
    autocmd! BufLeave * call MapHTMLKeys(0)
  else
    iunmap \\
    iunmap \&
    iunmap \<
    iunmap \>
    iunmap \-
    iunmap \<Space>
    iunmap \`
    iunmap \'
    iunmap \2
    iunmap \"
    autocmd! BufLeave *
  endif " test for mapping/unmapping
endfunction " MapHTMLKeys()
"}}}




""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

zsh
<C-r> キーワード入力後にも<C-r>

"増減したい数字の上で
"<C-a>を押すと増加
"<C-x>で減少(unite-rails)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

 行頭へのブロック挿入
 <C-v>I
矩形選択
挿入したい文字の入力
<C-[>  or ESC






""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

ASCIIcasts - “Episode 280 - RailsでPry”
http://ja.asciicasts.com/episodes/280-pry-with-rails

rvm gemset use global
gem install pry pry-doc





""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""tag" vim 			↑設定↑
"           ↓操作方法、説明↓
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""







""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""tag" map確認 ショートカットキー
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"ショートカットキーの確認
"Vimデフォルトで割り当てられていないかを確認
":h index.txt

"そのショートカットキーの定義元ファイル情報も表示
"そのショートカットキーの定義元ファイル情報も表示
"そのショートカットキーの定義元ファイル情報も表示

"自分またはプラグインが割り当て確認
"ノーマルのみ
":verbose nmap   
"全部のマップ
":verb map

"デフォルトの割り当て
":h index.txt 

"map一覧をテキストに表示。
":mkexrc




""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Vimの使い方－Tips
http://www15.ocn.ne.jp/~tusr/vim/vim_text2.html#mozTocId650051

map
ノーマル	ビジュアル	演算待ち

map!
挿入	コマンドライン



"ノーマルモードのキーマップ
" nmap     

"ノーマルモードのキーマップ (ただし再帰的にキーマップを追いません)
" nnoremap 

"インサートモードのキーマップ
" imap     

"インサートモードのキーマップ (ただし再帰的にキーマップを追いません)
" inoremap 


"空のマップを作るには {rhs} に "<Nop>" を指定する方法が簡単です。これは |<>| 表
"記を使えるようにしていれば動作します。
"例えば、ファンクションキー 8 は何もしない、としたい場合は次のようにします。
"        :map  <F8>  <Nop>
"        :map! <F8>  <Nop>

"実行するコマンドがコマンドラインに表示されないようにする
"例:
"        :map <silent> ,h /Header<CR>


"<C-O>を押すと一時的に ノーマルモードに移行します。

"プログラムを編集中に便利な移動コマンドです。
"コマンド	意味
"[[	前の関数にジャンプ
"]]	次の関数にジャンプ
"%		対応する括弧"{ }","[ ]","( )"、コメント("/* */")にジャンプ
"gd	ローカル宣言にジャンプ
"gD	グローバル宣言にジャンプ
"gf	カーソル下の単語をファイル名として開く
"ga	カーソル位置の単語の文字コードを表示

"<S-...>	Shift キーとの同時押し
"<C-...>	Control キーとの同時押し
"<M-...>	Alt キー、もしくは Meta キーとの同時押し
"<A-...>	Alt キー、もしくは Meta キーとの同時押し
"<D-...>	Command キーとの同時押し（Mac OSX環境）
"例えば、「<C-r>」と表記された場合は、 
"Control キーと r キーを同時押しすることを表現している、 

"<silent>
"コマンドラインへの出力を抑制します。キーマッピングからコマンドを実行する場合などに指定します。

"<unique>
"すでにマッピングが存在する場合、エラーにします。通常は上書きされます。

"<buffer>
"バッファローカルなキーマッピングを定義します。

"<expr>
"マップ先の文字列を Vim の式とみなして、評価した結果の文字列をマップ先とします。

"<expr> 実行コマンドが入る。
"<expr> 実行コマンドが入る。
"<expr> 実行コマンドが入る。
"<expr> 実行コマンドが入る。
"<expr> 実行コマンドが入る。
"<expr> 実行コマンドが入る。
"<expr> 実行コマンドが入る。
"<expr> 実行コマンドが入る。
"<expr> 実行コマンドが入る。
"<expr> 実行コマンドが入る。
"<expr> 実行コマンドが入る。
"<expr> 実行コマンドが入る。
"<expr> 実行コマンドが入る。



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""tag" 事前環境設定
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Ubuntu 10.10 で CapsLock を Ctrl にする | a weblog by k1
"http://blog.donity.com/k1/index.php/2010/12/22/ubuntu-10-10-%E3%81%A7-capslock-%E3%82%92-ctrl-%E3%81%AB%E3%81%99%E3%82%8B/

"Caps LockキーをCtrlとして割り当てる。(Xwindow版)
"/etc/X11/Xsession.d/10setxkbmap (END) 
	"#!/bin/sh
	"setxkbmap -option ctrl:nocaps

".vimrcなどに設定したプラグインなどの起動時間を出力させる。
"vim --startuptime test.log
"test.logに出力される。



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""tag" 分割した設定ファイル
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"設定ファイルを作って自分の好みに改造（2/3） － ＠IT
"http://www.atmarkit.co.jp/flinux/rensai/vim06/06b.html



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""tag" 環境切り分け
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"if has('***')
"  " *** 用の設定
"endif

"1 つの vimrc で複数の環境に対応できます。
" Unix 用の設定
"if has('unix') 
" Windows 用の設定
"if has('win32')
"if has('win64')
" Cygwin 用の設定
"if has('win32unix')
" GUI 用の設定
"if has('gui_running')
"if !has('gui_running') && !(has('win32') || has('win64'))



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""tag" vimマニュアル
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"移動
"Vim再入門
"http://www.slideshare.net/bleistift/vim-8362118

"j k
"w b e ge
"f t F T ; ,
"t)
"gg G 0 ^ $
"h l は使わないようにする。

"a A i I gi o O
"s S c C

"10a=
"132gg 132G
"10.

"de
"d+)
"d<C-v>}

"ye
"y+)
"y<C-v>}


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"
"区分	コマンド	説明
"カーソル移動	h	左
"カーソル移動	j	下
"カーソル移動	k	上
"カーソル移動	l	右
"カーソル移動	5l	５文字右にカーソルを移動する
"カーソル移動	Shift + g	ファイルの最後の行の先頭に移動
"カーソル移動	gg	ファイルの先頭に移動
"カーソル移動	$	行の最後に移動
"カーソル移動	０　ゼロ	行の先頭に移動
"カーソル移動	^	行の最初の空白でない文字に移動
"カーソル移動	G 	ファイルの末尾に移動
"カーソル移動	Ctrl　＋　f	ページアップ
"カーソル移動	Ctrl　＋　ｂ	ページダウン
"カーソル移動	M	カーソルを画面の中心に移動
"実行例	dd 移動　ｐ　ｄｄ　移動　ｐ	１行目と６行目を入れ替える。
"ファイル再読み込み	:e!	編集を破棄してファイルの再読み込み
"ファイル保存	:wq	現在編集中の内容を元のファイルに書き込んで終了
"ファイル保存終了	:w	編集結果を保存
"ヘルプ	:help + エンター	オンラインヘルプ表示
"編集：UNDO	u 	直前の編集状態に戻す
"編集：検索	/	前方
"編集：検索	?	後方
"編集：検索	n 	前方再検索
"編集：検索	N  	後方再検索
"編集：削除	x	現在カーソルのある文字を削除
"編集：削除	3x	現在カーソルのある文字を削除　カウントの使用
"編集：削除	X 	カーソル直前の文字を削除
"編集：削除	D 	カーソル以降を削除
"編集：削除	dw	現在カーソルのある単語を削除
"編集：削除	Shift + d	カーソルから行末までを削除
"編集：削除	dd	現在カーソルのある行を削除（カット）
"編集：削除	100dd	現在カーソルのある行を削除　カウントの使用
"編集：置換	s/xxx/yyy/	xxxをｙｙｙに置換
"編集：置換	:s/xxx/yyy/g	カーソル行を全範囲として、xxxをyyyに置換
"編集：置換	:%s/xxx/yyy/g	ファイルを全範囲として、xxxをyyyに置換
"編集：置換	:%s/xxx/yyy/gc	ファイルを全範囲として、xxxをyyyに置換  確認しながら。
"編集：ペースト	p	カーソル行の下にペースト
"編集：ペースト	3p	カーソル行の下にペースト　バッファーが３回ペーストされる。
"編集：ペースト	P 	カーソル行の上にペースト
"編集：文字入力	i	インサートモードになり、カーソルの前に文字列を挿入可能
"編集：文字入力	a	インサートモードになり、カーソルの後ろに文字列を挿入可能
"編集：文字入力	o	カーソル行の下に一行空白行を挿入
"編集：文字入力	Shift + o	カーソル行の上に一行空白行を挿入
"編集：文字入力	ESC	インサートモードからコマンドモードに戻る
"編集：文字入力	I 	カーソル行の先頭から入力開始
"編集：文字入力	A 	カーソル行の末尾から入力開始
"編集：文字入力	r	カーソル上の文字を置換
"編集：文字入力	R 	以降の入力を上書き状態
"編集：文字入力	O 	カーソル行の上に一行空白行を挿入
"編集：文字入力	J 	カーソル行と直下の行を連結
"編集：ヤンク	yy	カーソル行をヤンク（コピー）
"編集：ヤンク	3yy	カーソル行をヤンク（コピー）　カウントの使用
"モードについて	起動直後	コマンドモード
"モードについて	i	コマンド　－＞　インサート　モード
"モードについて	ESC	インサート　－＞　コマンド　モード
"モードについて	:	コマンド　－＞　ｅｘラインエディタ　モード
"モードについて	ESC	ｅｘラインエディタ　－＞　コマンド　モード
"起動	$ vi file.txt	　
"終了	:q!	編集結果を破棄して強制終了
"終了	:wq file_name	現在編集中の内容を指定されたファイルに書き込んで終了
"終了	:wq! file_name	現在編集中の内容を指定されたファイルに上書きして終了



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Big Sky :: Learn Vim Progressively
"http://mattn.kaoriya.net/software/vim/20110902125512.htm

"w → 次の単語の先頭に移動し
"e → その単語の終わりに移動する。
"デフォルトでは単語とは文字とアンダースコアで構成されている。 
"WORDは空白文字で区切られた文字のグループ。 
"WORDと見なしたい場合は、単に大文字のを使おう。

"W → 次のWORDの先頭に移動し
"E → そのWORDの終わりに移動する。

"%: (、{、[の対に移動。
"* (関連: #): カーソル位置のある単語で次の(関連: 前の)物へ移動。


"y (ヤンク)だけではなく、
"d (削除)、
"v (ビジュアル選択)、
"gU (大文字)、
"gu (小文字)... 


"f	その行で次に見つかる文字まで移動
"t	その行で次に見つかる文字の前まで移動
"F
"T



"vi" → fooを選択
"va" → "foo"を選択
"vi) → "foo"を選択
"va) → ("foo")を選択
"v2i) → map (+) ("foo")を選択
"v2a) → (map (+) ("foo"))を選択

"v
"V
"Ctr+V

"J → 全ての行を結合
"< (関連: >) → 左へ(関連: 右へ)インデント
"= → オートインデント

"q



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"コマンドラインでのvimコマンド補完
"ctrl+D <TAB>



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"コマンド＆ショートカット設定の有無

"insert
" y	ヤンク
" d カット

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"置換
":substitute 

"現在行のみが置換対象。
":s

"ファイル全体が置換対象。
":%s

":{コマンドの処理範囲}s/{置換するテキスト}/{置換後テキスト}/{オプション}
"%									ファイル全体
"{行数A},{行数B}		行数Aから、行数Bまでの範囲の行

"g			その行でマッチしたテキスト全てを置換する
"c			処理を行う前に、置換処理をするかどうかを確認する。


" <C-G>    位置とファイルの情報
" %        対応するカッコに移動する。
" R        まとめて置き換え



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"移動コマンド一覧
"コマンド		移動
"H					ホーム行（画面の一番上の行）にジャンプ
"M					画面の中央の行にジャンプ
"L					画面の最下行にジャンプ

"^F					1画面分順方向にスクロール
"^B					1画面分逆方向にスクロール
"^D					1/2画面分順方向にスクロール
"^U					1/2画面分逆方向にスクロール
"^E					1行分順方向にスクロール
"^Y					1行分逆方向にスクロール

"z[Enter]		カレント行が画面の一番上に表示されるようにスクロール
"z.					カレント行が画面の中央に表示されるようにスクロール
"z-					カレント行が画面の一番下に表示されるようにスクロール

"^L					画面を書きなおす



"[Enter]		次の行の1文字目にジャンプ
"+					次の行の1文字目にジャンプ
"-					前の行の1文字目にジャンプ

"0					行の先頭
"^					カレント行の空白以外の1文字目に移動
"n|					カレント行のn桁目に移動
"e					単語の末尾にジャンプ
"E					単語の末尾にジャンプ（句読点も単語の一部とみなす）
"$					行の末尾

"(					現在の文の先頭にジャンプ
")					次の文の先頭にジャンプ

"{					現在の段落の先頭にジャンプ
"}					次の段落の先頭にジャンプ

"[[					現在のセクションの先頭にジャンプ
"]]					次のセクションの先頭にジャンプ

"nG					n行目にジャンプ
"G					ファイルの末尾にジャンプ
"``					直前のマークまたは文脈に戻る
"''					直前のマークを含む行の先頭に戻る

"^G					カレント行の情報を表示（移動コマンドではない）



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"fx					カレント行の次のxに移動
"Fx					カレント行の前のxに移動
";					直前の検索コマンドを同じ方向で繰り返す
",					直前の検索コマンドを反対の方向で繰り返す
"tx					カレント行の次のxの直前に移動
"Tx					カレント行の前のxの直後に移動

"n					検索を繰り返す
"N					反対の方向で検索を繰り返す

"/pattern		パターンを順方向に検索
"?pattern		パターンを逆方向に検索
"/[Enter]		順方向に検索を繰り返す
"?[Enter]		逆方向に検索を繰り返す

"*	カーソル位置の単語を検索	下方向
"#	カーソル位置の単語を検索	上方向

":s/単語/単語/g	正規表現置換	
"&	直前の正規表現置換を繰り返す	オプションは全て無視される



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Ctrl-l	再描画	表示が変になったときに使用

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"※ たとえば、[^F]と記載しているコマンドは、[Ctrl] + F のこと。
"G（Go To）コマンド
"Gは、行番号を数値引数として利用して、その行に直前するコマンド。
"たとえば、44Gなら44行目の先頭に移動する。

"``は、その間に編集作業を何もしていなければ元の位置
"（最後にGコマンドを実行した位置）に戻れる。

"編集してG以外のコマンドによってカーソルを動かした場合には、
"``は最後に編集を施した位置に戻る。

"また、検索コマンド（/や?）を実行したあとで``を使うと、
"検索を始めた位置にカーソルが戻る。

"mx	現在の位置をxでマーク
"'x	xでマークした行の1文字目にカーソルを移動
"`x	xでマークした文字にカーソルを移動

" ' => Shift+7
" ` => Shift+@

"~		大文字、小文字の変換
"~		大文字、小文字の変換
"~		大文字、小文字の変換

">>, <<
"カーソル行の右シフト、左シフト

"3>>
"は3行をシフト

">} ,<}
"カーソル行から次の段落まで右シフトまたは左シフトする

"Ctrl-a	カーソル位置の数字を 1 増やす
"Ctrl-x	カーソル位置の数字を 1 減らす

"q 文字	マクロを記録する	記録終了は q
"@ 文字	マクロを実行する

"[[					前の関数にジャンプ
"]]					次の関数にジャンプ
"%					対応する括弧"{ }","[ ]","( )"、コメント("/* */")にジャンプ
"gd					ローカル宣言にジャンプ
"gD					グローバル宣言にジャンプ
"gf					カーソル下の単語をファイル名として開く
"ga					カーソル位置の単語の文字コードを表示



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" ■buffer（バッファ管理）
" :ls バッファ一覧を表示
" b buffnum 今いるwindow に特定のバッファを呼び出す
" :bd buffnum そのバッファを削除
" :bn 次のバッファに移動
" :bp 前のバッファに移動

" ■register(レジスタ管理)
" "ay 選択範囲をレジスタ a に保存
" "ayy 今いる行をレジスタ a に保存
" "ap レジスタ a の内容をカーソル位置にペースト
" :reg レジスタに格納されている情報を一覧表示
" :reg レジスタに格納されている情報を一覧表示
" :reg レジスタに格納されている情報を一覧表示

" ■mark（マーク）
" ma 現在のカーソル位置をマーク名 a に保存
" 'a マーク名 a の位置に移動
" :marks マークの一覧を表示する

" ■word completion（単語補完）
" Ctrl+p 単語補完（前方検索）
" Ctrl+n 単語補完（後方検索）

" ■recording（操作記憶）
" qa 操作の記録を開始し、レジスタ a に保存する
" q 操作の記録を終了する
" @a レジスタ a に保存された操作を再生する
" 5@a レジスタ a に保存された操作を5 回再生する

" ■外部コマンドとの連携
" :!command 外部コマンド実行(領域指定すると出力も取込）
" :r!command 外部コマンド実行(カーソル位置へ出力挿入)



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"折りたたみ
"よく使うコマンド
"zi					折り畳みの有効無効の切り替え

"zf					選択領域を折りたたむ
"za					折り畳みの開け閉め
"zd					折り畳みを削除する

"時々使うコマンド
"zA					折り畳みの開け閉め（再帰）
"zD					折り畳みを削除する（再帰）
"zE					全ての折り畳みを削除

"折りたたみに関する操作
"zc/zC       折り畳みを閉じる。Cだと再帰的に閉じる
"zo/zO       折り畳みを開く。Oだと再帰的に開く
"zm/zM       全ての折り畳みを閉じる。mだと開いている一番下の折り畳みを閉じる
"zR/zr       全ての折り畳みを開く。Rだと閉じている一番上の折り畳みが開く

"一般設定
"折り畳みの種類の切り替えとか
"set foldmethodで指定できる折り畳み方法
"set foldmethod=manual	手動
"set foldmethod=marker	マーカー
"set foldmethod=indent	インデント
"set fdc=0	折り畳みカラム幅の設定

"manual     手動でfold レベルをきめる
"indent     インデントの数をfold レベルにする
"expr       foldを定義する式を指定する
"syntax     構文強調によりfoldを定義する
"diff       変更されていないテキストをfoldとする
"marker     テキスト中の印でfoldを定義する 

"ruby用 折りたたみ設定 （Pythonでも利用可能？）
"set foldmethod=indent
"set fdc=0



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"# {{{ や #}}} などとしても折り畳みが適用されるようにしたい。
"折り畳み設定はデフォルトでは// や /* */ などのC言語的なコメントにしか適用されない。 そこでシャープ(#)のみがコメントとするような言語では、以下の様にして設定を加える 必要がある。

"set commentstring=;#%s        "HTML言語のコメント形式
"set commentstring=/*%s*/      "C言語のコメント形式
"set commentstring=\%%s        "texのコメント形式
"set commentstring=            "コメントなし
"以下の様にファイルにvimの設定を記述していると例えばPerlの様に
"#がコメントとなる記述で利用することができます。

"フォルドレベルを指定する
":set foldnestmax=3       fold のネストレベルを3にする
":set fdn=1               fold のネストレベルを1にする



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"ソースが折りたたまれている。
"【Vim】ソースコードを折り畳んで表示する - blog.remora.cx
"http://blog.remora.cx/2011/01/folding-sources-on-vim.html

"'foldmethod' オプションをモードラインで使う

"モードラインとは？
"ファイルタイプ別ではなくファイルごとにエディタの設定を変更したい場合、
"ファイルに vim エディタ特有の記述をしておくことで、
"そのファイルが vim エディタで開かれた時に
"特定の設定を有効にするモードラインという機能が役に立ちます。
"http://nanasi.jp/articles/howto/file/modeline.html


"Vim-users.jp - Hack #170: テキストを折り畳む  基本編
"http://vim-users.jp/2010/08/hack170/

"マーカー文字列を埋め込んで、ソースコードを折り畳み表示する  名無しのvim使い
"http://nanasi.jp/articles/howto/fold/fold-marker.html



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"今までの9回分の削除内容は、番号付きのバッファに保存されている。
"最後の削除内容はバッファ1に、その前の削除内容はバッファ2に
"というように保存されている。

"たとえば、バッファ2に入っている削除内容を復元するには、
"「2p」とタイプすると、バッファ2の内容がカーソルのあとに挿入される。

"「"dP」：バッファdの内容をカーソルの前に挿入
"「"ap」：バッファaの内容をカーソルのあとに挿入
"なお、バッファ名を大文字で指定すると、
"ヤンクしたり削除したりしたテキストがそのバッファの現在の内容の末尾に追加される。

"mx				現在の位置をxでマーク
"'x				xでマークした行の1文字目にカーソルを移動
"`x				xでマークした文字にカーソルを移動
"``				直前のマークまたは文脈の位置に戻る
"''				直前のマークまたは文脈のある行の先頭に戻る



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""tag" vim help
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"ヘルプ
":help 分からないこと
":h 分からないこと

"ヘルプを表示する時に、ウィンドウを分割しない
":help 分からないこと | only

" ユーザマニュアル
":help user-manual
" How-toリンク
":help howto



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

":help間の移動
"<C-]> キーワードにジャンプし、
"<C-t> 前に戻る

"パイプ文字(|)で囲まれた部分がキーワードですが、それ以外の箇所でもキーワードにマッチした場合はジャンプします。

"ヘルプタグを更新した場合の、タグを再設定。
":helptags $VIM/doc


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"コマンド一覧表ページ
"このページを見ると、大抵解決します。

":help index

" ノーマルモードのコマンド一覧の表示
":viusage
" EXモードのコマンド一覧の表示
":exusage




""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"helpgrep 
"	:helpgrep 検索したいキーワード
"	:helpg[rep] hogehoge

"検索結果が複数あった場合
":copen
"return で選択。
":close

"開いている全てのバッファからgrep
":bufdo vimgrepadd /hogehoge/ %



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"内部grep

":vim[grep] /hogehoge/j *.txt | cw
"これでカレントディレクトリにある
"全ての.txtファイルから「hogehoge」を検索し、
"マッチした結果がQuickFixに表示されます。

"ちなみに「ｊ」オプションは
"マッチしたファイルへ自動的にジャンプしない指定、
"そして
"| cw はマッチしたファイルがあった場合にQuickFixを開きます。

"毎回「| cw」を付けるのが面倒な場合は、以下のautocmd設定で自動化することも可能。
"au QuickfixCmdPost vimgrep cw

"QuickFixの主な操作は、
":cn #次のエラー箇所へジャンプ
":cp #前のエラー箇所へジャンプ(:cNでも同じ)
":ccl #QuickFixを閉じる
"一旦結果をクリアするときは「cexpr “”」で。

":vimgrep /hogehoge/ **/*.txt
"こうすると今度はカレントディレクトリ以下のディレクトリ内にある
".txtファイルも検索対象になります。


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""tag" 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""tag" 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""tag" 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""






